# returns a colour between red and green for an edge
def get_colour(val):
    # red: 255 0 0, orange 255 165 0, green 0 255 0
    # red -> orange
    if val < 0:
        r = 255
        g = int(165/10 * (val + 10))
        b = 0
    # orange -> green
    else:
        r = int(255 - ((255/10) * val))
        g = int(165 + ((90/10) * val))
        b = 0
    return (r, g, b)

# returns a size for the node
def get_size(n):
    return 15 + n.degree()

#! make a node
def mn(name):
    n = Node(name)
    graph.add_node(n)
    return n

#! make an edge
def me(n1,n2,name):
    e = Edge(n1, n2, name)
    graph.add_edge(e)
    return e

# colour legend
colourMatching = {
    "y":Color.YELLOW,
    "t":Color(247,220,180),
    "l":Color.LIGHT_GREY,
    "b":Color.BLUE,
    "p":Color(255,192,203),
    }

nodes = {}
nodeNames = ["Barry Benson","Vanessa Bloome","Ken","Bud Ditchwater","Jock","Adam Flayman","Mooseblood","Janet Benson","Martin Benson","Leyton T. Mongomery","Bee Larry King","Waterbug","Judge Bumbleton","Ladybug"]
nodeColours = ["y","t","t","t","y","y","l","y","y","t","y","b","t","p"]
for i, name in enumerate(nodeNames):  
    nodes[name] = mn(name)
    nodes[name].set_color(colourMatching[nodeColours[i]])

edges = {}
edgeInfo = [("12",10),("13",-10),("14",-7),("15",-3),("16",9),("17",7),("18",10),("19",10),("110",-10),("111",1),("112",0),("113",7),("114",6),("23",-9),("24",-7),("213",7),("312",-1),("610",-10),("714",8),("89",10)]
for k, j in edgeInfo:
    try:
        first, second = k
    except(ValueError):
        first, second = k[0], k[1:]
    edges[f"e{str(k)}"] = me(nodes[nodeNames[int(first)-1]], nodes[nodeNames[int(second)-1]], str(j))

    r,g,b = get_colour(j)
    edges[f"e{str(k)}"].set_color(Color(r,g,b))

[nodes[name].set_size(size=get_size(nodes[name])) for name in nodeNames]

pynode_core.add_event(pynode_core.Event(pynode_core.js_set_spread, [130]))

print(nodes)
print(edges)
print([get_colour(val) for val in range(-10,11)])
